1) DNA

def DNA(string):
    string = str(string)
    return((string.count('A')),(string.count('C')),(string.count('G')),(string.count('T')))

dna = open('rosalind_dna.txt', 'r')
obj = dna.readlines()
print(DNA(obj))

2) RNA

def RNA(string):
    rna = ''
    for x in str(string):
        if x == 'G' or x == 'C' or x == 'A':
            rna += x
        elif x == 'T':
            rna += 'U'
    return(rna)

dna = open('rosalind_rna.txt', 'r')
obj = dna.readlines()
print(RNA(obj))

3) REVC

def revc(string):
    comp = ''
    string = reversed(str(string))
    for x in string:
        if x == 'G':
            comp += 'C'
        elif x == 'C':
            comp += 'G'
        elif x == 'T':
            comp += 'A'
        elif x == 'A':
            comp += 'T'
    return comp

dna = open('rosalind_revc.txt', 'r')
obj = dna.readlines()
print(revc(obj))

4) GC

def gc(id, string):
    id = id
    cg = int(string.count('G')+string.count(('C')))
    return (id, cg/len(string)*100)

def fasta(input, output):
    dna = open(input, 'r')
    obj = dna.read().replace('\n','').split('>')
    fasta = open(output, 'w')
    ret = list()
    for x in range(1, len(obj)):
        string = (str(obj[x][0:13])+':'+obj[x][13:])
        fasta.write(str(string.split(':')))
        fasta.write('\n')
        ret.append(string.split(':'))
    return ret
a = list()
b = list()
input_formated = fasta('rosalind_gc.txt', 'results.txt')
for x in range(len(input_formated)):
    p = gc(input_formated[x][0], input_formated[x][1])
    a.append(p[0])
    b.append(p[1])
maxb = b.index(max(b))
print(a[maxb], (max(b)))

5) SUBS

def subs(string, sub):
    ret_list = []
    for x in range(len(string)):
        if string[x:].startswith(sub):
            ret_list.append(x+1)
    return ret_list
    
data = open('rosalind_subs.txt', 'r')
line = data.readlines()
string = str(line[0].strip())
sub = str(line[1].strip())
output = (subs(string, sub))
print(*output)

6) CONS


7) LCSM
8) REVP
9) SPLC
10) LEXF
11) FIB

def fib(n, k):
    p, c = 1,1
    for x in range(n-1):
        c, p = p, p+(c*k)
    return(c)
    
data = open('rosalind_fib.txt', 'r')
line = data.readlines()
first = line[0].split()
n, k = int(first[0]), int(first[1])
print(fib(n, k))
    
12) LGIS
